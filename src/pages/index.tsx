import { useAtom } from "jotai";
import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useEffect, useState } from "react";
import Grid from "../components/Grid";
import Keyboard from "../components/Keyboard";
import { currentGuessAtom, currentGuessFullAtom, guessedWordsAtom, searchedWordAtom, rowAtom, modalAtom } from "../store/store";
import { WORDS } from "../lib/wordlist";
import Modal from "../components/Modal";

const Home: NextPage = () => {
  const [letter, setLetter] = useAtom(currentGuessAtom);
  const [guessWord, setGuessWord] = useAtom(currentGuessFullAtom);
  const [test, setTest] = useState(0)
  const [guessWordsArray, setGuessWordsArray] = useAtom(guessedWordsAtom);
  const [searchedWord] = useAtom(searchedWordAtom);
  const [row, setRow] = useAtom(rowAtom);
  const [isModalOpen, setIsModalOpen] = useAtom(modalAtom);
  
  const allKeys = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");

  const onEnter = () => {  
    if (guessWord === searchedWord) {
      const word = guessWord;
      setLetter([])
      setGuessWordsArray((prev) => {
        
        return [...prev, word]
      });
      setIsModalOpen(true);
    } else {
      if (letter.length < 5) {
        return
      }

      if (WORDS.includes(guessWord.toLowerCase())) {
        const word = guessWord;
        setLetter([])
        setGuessWordsArray((prev) => {
          
          return [...prev, word]
        });
      } else {
        alert("Invalid")
      }
    }
  }

  const onChar = (key: string) => {
    const wordLength = letter.length;

    if (key === "Backspace") {
      onBackspace();
    }
    

    console.warn(key)
    if (key === "Enter") {
      console.warn("enter");
      onEnter();
      return;
    }

    if (wordLength < 5 && allKeys.includes(key.toUpperCase())) {
      setLetter((prev) => {
        if (prev.length < 5)
          return [...prev, key.toUpperCase()]

        return prev
      });
      return;
    }
  }

  const onBackspace = () => {
    setLetter((prev) => prev.slice(0, letter.length - 1));
    return;
  }

  

  
  useEffect(() => {
    const handleKeyDown = (e: any) => {
      onChar(e.key);
    };

    window.addEventListener("keydown", handleKeyDown);

    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  }, [onEnter]);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex min-h-screen flex-col items-center justify-center p-4">
        <Game onChar={onChar} onEnter={onEnter} onBackspace={onBackspace}/>
      </main>
    </>
  );
};

export default Home;


type Props = {
  onChar: (value: string) => void,
  onEnter: () => void,
  onBackspace: () => void
}

const Game = ({ onChar, onEnter, onBackspace }:Props) => {
  return (
    <>
    <Grid />
    <Keyboard onChar={onChar} onEnter={onEnter} onBackspace={onBackspace} />
    <Modal />
    </>
  );
};


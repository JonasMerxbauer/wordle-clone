import { useAtom } from "jotai";
import { type NextPage } from "next";
import Head from "next/head";
import { useEffect } from "react";
import { signIn, signOut, useSession } from "next-auth/react";
import Grid from "../components/Grid";
import Keyboard from "../components/Keyboard";
import {
  currentGuessAtom,
  currentGuessFullAtom,
  guessedWordsAtom,
  searchedWordAtom,
  modalAtom,
} from "../store/store";
import { WORDS } from "../lib/wordlist";
import Modal from "../components/Modal";

const Home: NextPage = () => {
  const [letter, setLetter] = useAtom(currentGuessAtom);
  const [guessWord] = useAtom(currentGuessFullAtom);
  const [, setGuessWordsArray] = useAtom(guessedWordsAtom);
  const [searchedWord] = useAtom(searchedWordAtom);
  const [, setIsModalOpen] = useAtom(modalAtom);

  const allKeys = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");

  const onEnter = () => {
    if (guessWord === searchedWord) {
      const word = guessWord;
      setLetter([]);
      setGuessWordsArray((prev) => {
        return [...prev, word];
      });
      setIsModalOpen(true);
    } else {
      if (letter.length < 5) {
        return;
      }

      if (WORDS.includes(guessWord.toLowerCase())) {
        const word = guessWord;
        setLetter([]);
        setGuessWordsArray((prev) => {
          return [...prev, word];
        });
      } else {
        alert("Invalid");
      }
    }
  };

  const onChar = (key: string) => {
    const wordLength = letter.length;

    if (key === "Backspace") {
      onBackspace();
    }

    if (key === "Enter") {
      onEnter();
      return;
    }

    if (wordLength < 5 && allKeys.includes(key.toUpperCase())) {
      setLetter((prev) => {
        if (prev.length < 5) return [...prev, key.toUpperCase()];

        return prev;
      });
      return;
    }
  };

  const onBackspace = () => {
    setLetter((prev) => prev.slice(0, letter.length - 1));
    return;
  };

  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      onChar(e.key);
    };

    window.addEventListener("keydown", handleKeyDown);

    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  }, [onEnter]);

  return (
    <>
      <Head>
        <title>Wordle clone</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <div className="flex min-h-screen w-screen flex-col items-center justify-center gap-4 bg-black">
          <Game onChar={onChar} onEnter={onEnter} onBackspace={onBackspace} />
        </div>
      </main>
    </>
  );
};

export default Home;

type Props = {
  onChar: (value: string) => void;
  onEnter: () => void;
  onBackspace: () => void;
};

const Game = ({ onChar, onEnter, onBackspace }: Props) => {
  return (
    <>
      <Grid />
      <Keyboard onChar={onChar} onEnter={onEnter} onBackspace={onBackspace} />
      <AuthShowcase />
      <Modal />
    </>
  );
};

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
